0.每一个 Vuex 应用的核心就是 store（仓库）。“store”基本上就是一个容器，它包含着你的应用中大部分的状态 (state)。Vuex 和单纯的全局对象有以下两点不同：
1.Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。
2.你不能直接改变 store 中的状态。改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation。这样使得我们可以方便地跟踪每一个状态的变化，从而让我们能够实现一些工具帮助我们更好地了解我们的应用。

import {mapState} from 'vuex'
1.
computed: mapState({
        count: state => state.count,
        age: 'age', //state => state.age
        localNum(state){
            return state.num + this.num;
        }
    }),
2.
computed: mapState([
        'count',
        'age'
    ]),
3.computed: {
    ...mapState(['age', 'count']),
    func(){
        //...
    }
}
















import Vue from 'vue'
import Vuex from 'vuex'
import axios from 'axios'

Vue.use(Vuex)

// let selectModule = {
//   state:{
//     title:'hello123',
//     list: []
//   },
//   mutations:{
//     changeTitle(state, payload){
//       state.title = payload.title
//     },
//     changeList(state, list){
//       state.list = list;
//     }
//   },
//   actions:{
//     getListAction({commit}){
//       // 发送请求
//       axios.get('http://easy-mock.com/mock/594f5d4b9adc231f3569be76/list/list')
//         .then((data)=>{
//           commit("changeList", data.data);  // 拿到数据后，提交mutations，改变状态
//         })
//         .catch((error)=>{
//           conso.log(error)
//         })
//     }
//   }
// };

// this.$store.state.title
// this.$store.state.selectModule.title

// 定义一个容器

let store = new Vuex.Store({
    state: { //初始化状态
      count: 100,
      sum:99,
      isShow:true
    },
    getters: {//类似计算属性
      filterCount(state){
        return state.count >= 120 ? 120 : state.count;
      },
      sumGet(state){
        return state.sum >= 200 ? 200 : state.sum
      }
    },
    mutations: {//payload接受页面事件交互传过来的参数值
      addIncrement(state, payload){
         state.count += payload.n;
       },
      deIncrement(state, payload){
        state.count -= payload.de;
      },
      sumFn(state, payload){
        state.sum += payload.add;
      }
    },
   actions: {
      addAction({commit,dispatch}){
        setTimeout(()=>{
            // 改变状态，提交mutations
            commit("addIncrement", {n:5})
            dispatch("textAction", {test: '111'})
        },1000)
      },
      textAction(context, obj){//接收上面dispatch提交过来的参数
        console.log(this.state.isShow)//相当于一个异步操作里的回调函数
      }
  }
  // ,
  //   modules:{ //modules：多个store模块集合
  //     selectModule
  //   }
})

export default store
